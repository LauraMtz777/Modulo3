{"mappings":"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","sources":["<anon>","src/js/controller.js","src/js/model.js","src/js/config.js","src/js/helpers.js","node_modules/@parcel/runtime-js/lib/runtime-3cc799ea6512c510.js","src/js/views/RecipeView.js","src/js/views/view.js","src/js/views/searchView.js","src/js/views/resultView.js","src/js/views/paginationView.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n// Importando las dependencias necesarias\n// Importando el modelo y las constantes de configuración\n//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n// Implementando el modelo MVC para la aplicación Forkify\n// Descripción: Este es el modelo de la aplicación Forkify, que se encarga de\n// manejar la lógica de negocio, incluyendo la obtención de recetas y su renderizado.\n// Repositorio: https://github.com/bmjimenez/proyectojs2\n// Fecha: 2025-07-16\n// Autor: Bernardo Moya Jimenez\n// email: bmjimenez@hotmail.com\n// Importando la URL de la API y la función getJSON para realizar peticiones HTTP\n//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n// Archivo de configuración para la aplicación Forkify\n// Contiene constantes y configuraciones globales\n// Repositorio:https://github.com/bmjimenez/proyectojs2\n// Fecha: 2025-07-16\n// Autor: Bernardo Moya Jimenez\n// email: bmjimenez@hotmail.com\n// Este archivo contiene la URL de la API y el tiempo de espera para las peticiones HTTP\n// Se utiliza para configurar la conexión a la API y manejar errores de tiempo de espera.\n// Estas constantes son importadas en otros módulos para realizar peticiones a la API y manejar la lógica de la aplicación.\n// Se recomienda mantener estas constantes en un archivo separado para facilitar su mantenimiento y reutilización en toda la aplicación.\n// Además, se pueden agregar más configuraciones globales en este archivo según sea necesario en el futuro.\nconst $ba30e20475feac5a$export$923ea8233b386e99 = 'https://forkify-api.herokuapp.com/api/v2/recipes/';\nconst $ba30e20475feac5a$export$196440f71ed9f601 = 5; // Timeout para las peticiones\nconst $ba30e20475feac5a$export$5feaddb1377b7f5e = 10; // paginas de hasta 10 resultados \n\n\n//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n// Archivo helpers.js con funciones auxiliares para la aplicación Forkify\n// Contiene funciones para manejar peticiones a la API y otras utilidades\n// Repositorio: https://github.com/bmjimenez/proyectojs2\n// Fecha: 2025-07-16\n// Autor: Bernardo Moya Jimenez\n// email: bmjimenez@hotmail.com\n\nasync function $bd02c871d9c5ba8e$export$d047a7c56db64af4(id) {\n    try {\n        const fetchPro = fetch(id);\n        //console.log('Petición a la API:', `${API_URL}${id}`);\n        const res = await Promise.race([\n            fetchPro,\n            $bd02c871d9c5ba8e$var$timeout((0, $ba30e20475feac5a$export$196440f71ed9f601))\n        ]);\n        const data = await res.json();\n        // Validación del estado de res\n        if (!res.ok) throw new Error(`${data.message} (${res.status})`);\n        return data;\n    } catch (err) {\n        // Lanzar el error para que sea manejado por el controlador;\n        throw err;\n    }\n} // termina la función getJSON\n// Funcion para manejar el timeout de las peticiones\n// Esta función devuelve una promesa que se rechaza después de un tiempo específico\n// Sirve para manejar casos en los que una petición tarda demasiado tiempo en completarse.\nconst $bd02c871d9c5ba8e$var$timeout = function(s) {\n    return new Promise(function(_, reject) {\n        setTimeout(function() {\n            reject(new Error(`Request took too long! Timeout after ${s} second`));\n        }, s * 1000);\n    });\n};\nclass $bd02c871d9c5ba8e$export$30ce4bf7c3d733c3 {\n    constructor(numerator, denominator){\n        if (denominator) {\n            this.numerator = numerator;\n            this.denominator = denominator;\n        } else {\n            const value = typeof numerator === 'number' ? numerator : parseFloat(numerator);\n            const tolerance = 1.0E-6;\n            let h1 = 1, h2 = 0, k1 = 0, k2 = 1, b = value;\n            do {\n                const a = Math.floor(b);\n                let aux = h1;\n                h1 = a * h1 + h2;\n                h2 = aux;\n                aux = k1;\n                k1 = a * k1 + k2;\n                k2 = aux;\n                b = 1 / (b - a);\n            }while (Math.abs(value - h1 / k1) > value * tolerance);\n            this.numerator = h1;\n            this.denominator = k1;\n        }\n    }\n    toString() {\n        return this.denominator === 1 ? `${this.numerator}` : `${this.numerator}/${this.denominator}`;\n    }\n    valueOf() {\n        return this.numerator / this.denominator;\n    }\n} // termina la clase Fraction_function\n\n\nconst $0f1d4402dffacf5b$export$ca000e230c0caa3e = {\n    recipe: {},\n    search: {\n        query: '',\n        results: [],\n        page: 1,\n        resultsPerPage: (0, $ba30e20475feac5a$export$5feaddb1377b7f5e)\n    }\n};\nasync function $0f1d4402dffacf5b$export$b96725c7a035d60b(id) {\n    try {\n        // Llamada a la función getJSON para obtener los datos de la receta\n        const data = await (0, $bd02c871d9c5ba8e$export$d047a7c56db64af4)(`${(0, $ba30e20475feac5a$export$923ea8233b386e99)}${id}`);\n        console.log('Datos de la receta:', data);\n        // Validar response structure recibida de la API\n        // Si la estructura de datos no es válida, se lanza un error\n        if (!data?.data?.recipe) throw new Error('Estructura de datos invalida');\n        // Desestructuración del objeto recipe y guardado en state\n        // Aquí se extraen los datos de la receta del objeto data y se crea un nuevo\n        // objeto recipe con las propiedades necesarias.\n        // Se asegura de que la propiedad ingredients sea un array, incluso si no hay ingredientes.\n        // Esto es importante para evitar errores al renderizar la receta en la vista.  \n        const { recipe: recipe } = data.data;\n        const recipeObj = {\n            id: recipe.id,\n            title: recipe.title,\n            publisher: recipe.publisher,\n            sourceUrl: recipe.source_url,\n            image: recipe.image_url,\n            servings: recipe.servings,\n            cookTime: recipe.cooking_time,\n            ingredients: Array.isArray(recipe.ingredients) ? recipe.ingredients : []\n        };\n        //Guardar en en objeto state y mostrar en consola\n        // Aquí se actualiza el objeto state con la receta cargada,\n        // lo que permite que otras partes de la aplicación accedan a los datos de la receta\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.recipe = recipeObj;\n        console.log('Objeto Recipe cargado:', $0f1d4402dffacf5b$export$ca000e230c0caa3e.recipe);\n    } catch (err) {\n        // Lanzar el error para que sea manejado por el controlador\n        throw err;\n    }\n} // termina la función loadRecipe\nasync function $0f1d4402dffacf5b$export$202b8e5cb363a0c4(query) {\n    try {\n        const data = await (0, $bd02c871d9c5ba8e$export$d047a7c56db64af4)(`${(0, $ba30e20475feac5a$export$923ea8233b386e99)}?search=${query}`);\n        console.log(\"Resultados de la b\\xfasqueda:\", data);\n        // Validar estructura de datos recibida de la API\n        // Si la estructura de datos no es válida, se lanza un error\n        // Aquí se verifica que la propiedad recipes exista en el objeto data.data\n        // y que sea un array. Si no es así, se lanza un error.\n        // Esto es importante para asegurarse de que los datos recibidos sean válidos\n        // y se puedan procesar correctamente en la aplicación.\n        if (!data?.data?.recipes || !Array.isArray(data.data.recipes)) throw new Error(\"Estructura de datos inv\\xe1lida\");\n        // Guardar query en el estado\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.query = query;\n        // Transformar los resultados y guardarlos en el objeto state\n        // Aquí se mapea el array de recetas recibido de la API y se crea un nuevo\n        // array de objetos con las propiedades necesarias para mostrar en la vista.\n        // Se asegura de que cada objeto tenga las propiedades id, title, publisher e image.\n        // Esto es importante para que la vista pueda renderizar correctamente los resultados de búsqueda.\n        // Se utiliza el método map para transformar los datos y crear un nuevo array de objetos.\n        // Luego, se guarda este array en la propiedad results del objeto state.search.\n        // Esto permite que otras partes de la aplicación accedan a los resultados de búsqueda\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.results = data.data.recipes.map((rec)=>{\n            return {\n                id: rec.id,\n                title: rec.title,\n                publisher: rec.publisher,\n                image: rec.image_url\n            };\n        });\n        console.log('Resultados de busqueda guardados:', `${$0f1d4402dffacf5b$export$ca000e230c0caa3e.search.results}`);\n    } catch (err) {\n        console.log(`${err} \\u{1F4A5}\\u{1F4A5}\\u{1F4A5}\\u{1F4A5}`);\n        throw err; // Lanzar el error para que sea manejado por el controlador  \n    }\n} // termina la función loadSearchResults\nconst $0f1d4402dffacf5b$export$8d7f79465139ab72 = function(page = $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.page) {\n    $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.page = page;\n    const start = (page - 1) * $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.resultsPerPage;\n    const end = page * $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.resultsPerPage;\n    return $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.results.slice(start, end);\n};\n\n\n\n\nvar $1cd63cfe08530fad$exports = {};\n$1cd63cfe08530fad$exports = import.meta.resolve(\"eyyUD\");\n\n\n//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n//Autor: Jose Bernardo Moya Jimenez\n//email: bmjimenez@hotmail.com\n//Descripción: Este es el modelo de la aplicación Forkify, que se encarga de manejar la lógica de negocio, incluyendo la obtención de recetas y su renderizado.\n//Repositorio:https://github.com/bmjimenez/proyectojs2\n//Fecha: 2025-07-16\n// Importando iconos SVG y la clase Fraction_function\n\n\n//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n//Autor: Jose Bernardo Moya Jimenez\n//email: bmjimenez@hotmail.com\n//Descripción: Este es el modelo de la aplicación Forkify, que se encarga de manejar\n// las vistas de la aplicación, incluyendo la búsqueda de recetas, la paginación\n// y la visualización de recetas.\n//Repositorio:https://github.com/bmjimenez/proyectojs2\n//Fecha: 2025-07-18\n//Importa iconos\n\nclass $b2d7157267813d3a$export$2e2bcd8739ae039 {\n    _data;\n    // Método para renderizar los datos en el DOM\n    // Este método toma los datos y genera el HTML correspondiente utilizando el método _generateMarkup.\n    // Luego, limpia el contenido previo del elemento padre y agrega el nuevo HTML al principio.\n    // Si los datos son inválidos o no existen, se renderiza un mensaje de error\n    // utilizando el método renderError.\n    // Si los datos son válidos, se renderiza el HTML generado por _generateMarkup\n    // y se limpia el contenido previo del elemento padre antes de agregar el nuevo HTML.\n    // Este método es utilizado por las vistas para renderizar datos en el DOM y actualizar la\n    // interfaz de usuario con la información más reciente.\n    render(data) {\n        if (!data || Array.isArray(data) && data.length === 0) return this.renderError();\n        this._data = data;\n        const markup = this._generateMarkup();\n        this._clear();\n        this._parentElement.insertAdjacentHTML('afterbegin', markup);\n    }\n    // Método para limpiar el contenido previo del elemento padre\n    _clear() {\n        this._parentElement.innerHTML = '';\n    }\n    // Método para renderizar un spinner mientras se cargan los datos\n    // Este método genera un HTML para un spinner de carga y lo inserta en el elemento\n    // padre antes de renderizar los datos. Se utiliza para indicar al usuario que los datos\n    // están siendo cargados y que debe esperar.\n    // El spinner se muestra mientras se realizan operaciones asíncronas, como la carga de\n    // datos desde una API o base de datos.\n    renderSpinner() {\n        const markup = `\n      <div class=\"spinner\">\n        <svg>\n          <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports)))}#icon-loader\"></use>\n        </svg>\n      </div>`;\n        this._clear();\n        this._parentElement.insertAdjacentHTML('afterbegin', markup);\n    }\n    // Método para renderizar un mensaje de error\n    // Este método genera un HTML para un mensaje de error y lo inserta en el elemento\n    // padre. \n    renderError(message = this._errorMessage) {\n        const markup = `\n      <div class=\"error\">\n        <div>\n          <svg>\n            <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports)))}#icon-alert-triangle\"></use>\n          </svg>\n        </div>\n        <p>${message}</p>\n      </div>`;\n        this._clear();\n        this._parentElement.insertAdjacentHTML('afterbegin', markup);\n    }\n    // Método para renderizar un mensaje de éxito\n    // Este método genera un HTML para un mensaje de éxito y lo inserta en el elemento\n    // padre. \n    renderMessage(message = this._message) {\n        const markup = `\n      <div class=\"message\">\n        <div>\n          <svg>\n            <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports)))}#icon-smile\"></use>\n          </svg>\n        </div>\n        <p>${message}</p>\n      </div>`;\n        this._clear();\n        this._parentElement.insertAdjacentHTML('afterbegin', markup);\n    }\n} // termina la clase View\n\n\n// Clase RecipeView se encarga de renderizar la receta en el DOM, mostrar errores y spinner\n// y manejar eventos relacionados con la receta.\n// RecipeView hereda de la clase View para reutilizar métodos comunes de renderización\n// y manejo de errores.\nclass $e95330fac959b1b1$var$RecipeView extends (0, $b2d7157267813d3a$export$2e2bcd8739ae039) {\n    // Seleccionando el elemento del DOM donde se renderizará la receta\n    _parentElement = document.querySelector('.recipe');\n    _data;\n    _errorMessage = 'We could not find that recipe. Please try another one!';\n    _message = 'Recipe loaded successfully!';\n    // Método para renderizar la receta en el DOM\n    // Este método genera el HTML necesario para mostrar la receta\n    // y lo inserta en el contenedor de recetas.\n    // Utiliza la función _generateMarkup para crear el HTML de la receta.\n    render(data) {\n        if (!data || typeof data !== 'object') return this.renderError();\n        this._data = data;\n        const markup = this._generateMarkup();\n        this._clear();\n        this._parentElement.insertAdjacentHTML('afterbegin', markup);\n    }\n    // Método para renderizar un spinner mientras se cargan los datos\n    renderSpinner() {\n        const markup = `\n      <div class=\"spinner\">\n        <svg>\n          <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports)))}#icon-loader\"></use>\n        </svg>\n      </div>\n    `;\n        this._clear();\n        this._parentElement.insertAdjacentHTML('afterbegin', markup);\n    }\n    // Este método renderiza un mensaje de error en el DOM\n    // Se utiliza un template literal para crear el HTML del mensaje de error.\n    // El método _clear se utiliza para eliminar el contenido previo antes de renderizar el error\n    // y se inserta el nuevo contenido al principio del contenedor de recetas.\n    renderError(message = this._errorMessage) {\n        if (!message) message = this._errorMessage;\n        const markup = `\n      <div class=\"error\">\n        <div>\n          <svg>\n            <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports)))}#icon-alert-triangle\"></use>\n          </svg>\n        </div>\n        <p>${message}</p>\n      </div>\n    `;\n        this._clear();\n        this._parentElement.insertAdjacentHTML('afterbegin', markup);\n    }\n    // Este método renderiza un mensaje de exito en el DOM\n    // Se utiliza un template literal para crear el HTML del mensaje de éxito.\n    // El método _clear se utiliza para eliminar el contenido previo antes de renderizar el error\n    // y se inserta el nuevo contenido al principio del contenedor de recetas.\n    renderMessage(message = this._message) {\n        if (!message) message = this._message;\n        const markup = `\n      <div class=\"error\">\n        <div>\n          <svg>\n            <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports)))}#icon-smile\"></use>\n          </svg>\n        </div>\n        <p>${message}</p>\n      </div>\n    `;\n        this._clear();\n        this._parentElement.insertAdjacentHTML('afterbegin', markup);\n    }\n    // Método para añadir un manejador de eventos para renderizar la receta\n    // Este método se utiliza para escuchar eventos de cambio en el hash de la URL\n    // y cargar la receta correspondiente cuando el hash cambia.\n    // Se utiliza para actualizar la vista de la receta cuando el usuario navega a una receta\n    // específica a través de la URL.\n    // Se utiliza un bucle forEach para añadir el manejador de eventos a los eventos\n    // 'hashchange' y 'load', lo que permite que la receta se cargue\n    // tanto al cambiar el hash de la URL como al cargar la página por primera vez.\n    // Esto asegura que la receta se renderice correctamente en ambos casos.\n    // Se utiliza el método addEventListener para añadir el manejador de eventos.\n    // El manejador de eventos se pasa como argumento a este método.\n    // Esto permite que el controlador pueda definir la lógica de renderizado de la receta.\n    // El manejador de eventos se ejecutará cada vez que ocurra uno de los eventos\n    // especificados, lo que permite que la receta se renderice automáticamente\n    // cuando el usuario navega a una receta específica.\n    addHandlerRender(handler) {\n        [\n            'hashchange',\n            'load'\n        ].forEach((ev)=>window.addEventListener(ev, handler));\n    }\n    // Método para limpiar el contenido del contenedor de recetas\n    // Este método se utiliza para eliminar el contenido previo antes de renderizar una nueva receta.\n    _clear() {\n        this._parentElement.innerHTML = '';\n    }\n    // Método para renderizar la receta en el DOM\n    // Este método genera el HTML necesario para mostrar la receta\n    // y lo inserta en el contenedor de recetas.\n    // Utiliza la función _generateMarkup para crear el HTML de la receta.\n    _generateMarkup() {\n        if (!this._data.ingredients || !Array.isArray(this._data.ingredients)) return this.renderError('Ingredientes no disponibles');\n        return `\n    <figure class=\"recipe__fig\">\n        <img src=\"${this._data.image}\" alt=\"${this._data.title}\" class=\"recipe__img\" />\n        <h1 class=\"recipe__title\"><span>${this._data.title}</span></h1>\n    </figure>\n\n    <div class=\"recipe__details\">\n        <div class=\"recipe__info\">\n        <svg class=\"recipe__info-icon\">\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports))}#icon-clock\"></use>\n        </svg>\n        <span class=\"recipe__info-data recipe__info-data--minutes\">${this._data.cookTime}</span>\n        <span class=\"recipe__info-text\">minutes</span>\n        </div>\n        <div class=\"recipe__info\">\n        <svg class=\"recipe__info-icon\">\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports))}#icon-users\"></use>\n        </svg>\n        <span class=\"recipe__info-data recipe__info-data--people\">${this._data.servings}</span>\n        <span class=\"recipe__info-text\">servings</span>\n        </div>\n    </div>\n\n    <div class=\"recipe__ingredients\">\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\n        <ul class=\"recipe__ingredient-list\">\n        ${this._data.ingredients.map(this._generateIngredientMarkup).join('')}\n        </ul>\n    </div>\n\n    <div class=\"recipe__directions\">\n        <h2 class=\"heading--2\">How to cook it</h2>\n        <p class=\"recipe__directions-text\">\n        This recipe was designed by\n        <span class=\"recipe__publisher\">${this._data.publisher}</span>. Check it out!\n        </p>\n        <a class=\"btn--small recipe__btn\" href=\"${this._data.sourceUrl}\" target=\"_blank\">\n        <span>Directions</span>\n        <svg class=\"search__icon\">\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports))}#icon-arrow-right\"></use>   \n        </svg>\n        </a>    \n    </div>\n  `;\n    }\n    // Método privado para generar el HTML de un ingrediente\n    // Este método se utiliza para crear el HTML de cada ingrediente de la receta.\n    // Utiliza la función _formatQuantity para formatear la cantidad del ingrediente.\n    // Este método es llamado dentro de _generateMarkup para generar la lista de ingredientes.\n    // Se utiliza un template literal para crear el HTML de cada ingrediente.\n    // Cada ingrediente se muestra con su cantidad, unidad y descripción.\n    _generateIngredientMarkup(ing) {\n        return `\n      <li class=\"recipe__ingredient\">\n        <svg class=\"recipe__icon\">\n          <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports))}#icon-check\"></use>\n        </svg>\n        <div class=\"recipe__quantity\">\n          ${ing.quantity ? new (0, $bd02c871d9c5ba8e$export$30ce4bf7c3d733c3)(ing.quantity).toString() : ''}\n        </div>\n        <div class=\"recipe__description\">\n          <span class=\"recipe__unit\">${ing.unit || ''}</span>\n          ${ing.description}\n        </div>\n      </li>\n    `;\n    }\n    // Método privado para formatear la cantidad de un ingrediente\n    // Este método utiliza la clase Fraction_function para convertir la cantidad a una fracción\n    // Si la cantidad no es un número válido, se devuelve la cantidad original.\n    _formatQuantity(qty) {\n        try {\n            return new (0, $bd02c871d9c5ba8e$export$30ce4bf7c3d733c3)(qty).toString();\n        } catch (e) {\n            return qty;\n        }\n    }\n} // termina la clase RecipeView\nvar // Exportar una instancia de RecipeView para ser utilizada en el controlador\n// Esto permite que el controlador pueda acceder a los métodos de la clase RecipeView\n// y renderizar recetas, spinner y errores en el DOM.\n// Se utiliza el patrón Singleton para asegurar que solo haya una instancia de RecipeView.\n// Esto es útil para mantener un único punto de acceso a la vista de recetas en toda la aplicación.\n// Esto evita la creación de múltiples instancias y asegura que los cambios en la vista se reflecten en un solo lugar.\n// Se puede importar esta instancia en el controlador y utilizar sus métodos directamente.\n$e95330fac959b1b1$export$2e2bcd8739ae039 = new $e95330fac959b1b1$var$RecipeView();\n\n\n//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n//Autor: Jose Bernardo Moya Jimenez \n//email: bmjimenez@hotmail.com\n//Descripción: Esta clase genera la Vista de los resultados de busqueda \n//Repositorio:https://github.com/bmjimenez/proyectojs2\n//Fecha: 2025-07-17\n// Esta clase SearchView se encarga de manejar la vista de búsqueda en la aplicación Forkify.\n// Permite obtener la consulta de búsqueda del usuario y manejar el evento de búsqueda.\n// Utiliza el patrón de diseño de vista para separar la lógica de la interfaz de usuario de\n// la lógica de negocio, facilitando el mantenimiento y la escalabilidad de la aplicación.\nclass $813cf99795e9ec97$var$SearchView {\n    _parentEl = document.querySelector('.search');\n    // Método para obtener la consulta de búsqueda del usuario\n    // Este método busca el valor del campo de entrada de búsqueda y lo devuelve.\n    getQuery() {\n        const query = this._parentEl.querySelector('.search__field').value;\n        this._clearInput();\n        return query;\n    }\n    // Método para limpiar el campo de entrada de búsqueda\n    _clearInput() {\n        this._parentEl.querySelector('.search__field').value = '';\n    }\n    // Método para renderizar un mensaje de error en la vista de búsqueda\n    addHandlerSearch(handler) {\n        this._parentEl.addEventListener('submit', function(e) {\n            e.preventDefault();\n            handler();\n        });\n    }\n} // termina la clase searchView\nvar // Exportando una instancia de SearchView para que pueda ser utilizada en otras partes de la aplicación\n$813cf99795e9ec97$export$2e2bcd8739ae039 = new $813cf99795e9ec97$var$SearchView();\n\n\n//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n//Autor: Jose Bernardo Moya Jimenez\n//email: bmjimenez@hotmail.com\n//Descripción: Esta es la vista de resultados de búsqueda de recetas en la aplicación Forkify.\n// Esta vista se encarga de renderizar los resultados de búsqueda obtenidos del modelo,\n// mostrando una lista de recetas que coinciden con la consulta del usuario.\n// Utiliza la clase View para manejar la renderización de los resultados y la clase icons\n// para mostrar iconos SVG en la interfaz de usuario.\n//Repositorio:https://github.com/bmjimenez/proyectojs2\n//Fecha: 2025-07-19\n// Importando la clase View \n\n//import icons from 'url:../../img/icons.svg';\n// ResultsView hereda de la clase View para reutilizar métodos comunes de renderización\nclass $0e99300e7cdedd36$var$ResultsView extends (0, $b2d7157267813d3a$export$2e2bcd8739ae039) {\n    _parentElement = document.querySelector('.results');\n    _errorMessage = 'No recipes found for your query. Please try again!';\n    _message = '';\n    // Método para renderizar los resultados de búsqueda\n    // Este método toma los datos de resultados de búsqueda y genera el HTML correspondiente\n    // utilizando el método _generateMarkupPreview. Luego, limpia el contenido previo del elemento\n    // padre y agrega el nuevo HTML al principio.\n    _generateMarkup() {\n        if (!this._data || this._data.length === 0) return this.renderError(this._errorMessage);\n        return this._data.map(this._generateMarkupPreview).join('');\n    }\n    _generateMarkupPreview(result) {\n        return `\n      <li class=\"preview\">\n        <a class=\"preview__link\" href=\"#${result.id}\">\n          <figure class=\"preview__fig\">\n            <img src=\"${result.image}\" alt=\"${result.title}\" />\n          </figure>\n          <div class=\"preview__data\">\n            <h4 class=\"preview__title\">${result.title}</h4>\n            <p class=\"preview__publisher\">${result.publisher}</p>\n            <div class=\"preview__user-generated\"></div>\n          </div>\n        </a>\n      </li>`;\n    }\n} // termina la clase ResultsView\nvar // Exportando una instancia de ResultsView para que pueda ser utilizada en otras partes de la aplicación\n// Esto permite que la vista de resultados sea reutilizable y se pueda acceder a sus métodos y\n// propiedades desde otras partes del código, como el controlador principal de la aplicación.\n// Al exportar una instancia, se asegura que siempre se utilice la misma instancia de ResultsView\n// en toda la aplicación, lo que facilita el manejo del estado y la renderización de resultados.\n// Esto es útil para mantener la consistencia en la interfaz de usuario y evitar problemas de\n// duplicación de vistas o resultados.\n// Además, al exportar una instancia, se puede acceder a los métodos de la clase ResultsView\n// directamente desde el controlador, lo que simplifica la lógica de renderización de resultados\n// y mejora la legibilidad del código.\n$0e99300e7cdedd36$export$2e2bcd8739ae039 = new $0e99300e7cdedd36$var$ResultsView();\n\n\n//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n// Implementando el modelo MVC para la aplicación Forkify\n// Descripción: Este es el modulo de la aplicación Forkify, que se encarga de hacer la paginación de los resultados de búsqueda\n// Repositorio: https://github.com/bmjimenez/proyectojs2\n// Fecha: 2025-07-16\n// Autor: Bernardo Moya Jimenez\n// email: bmjimenez@hotmail.com\n\n\n// Clase PaginationView que maneja la paginación de los resultados de búsqueda\n// Esta clase hereda de la clase View para reutilizar métodos comunes de renderización\n// y manejo de errores. Se encarga de renderizar los botones de paginación\n// y manejar los eventos de clic en los botones de paginación.\nclass $cfa940594ee109f7$var$PaginationView extends (0, $b2d7157267813d3a$export$2e2bcd8739ae039) {\n    _parentElement = document.querySelector('.pagination');\n    // Método para renderizar los botones de paginación\n    // Este método genera el HTML necesario para los botones de paginación\n    // y lo inserta en el contenedor de paginación.\n    addHandlerClick(handler) {\n        this._parentElement.addEventListener('click', function(e) {\n            const btn = e.target.closest('.btn--inline');\n            if (!btn) return;\n            const goToPage = +btn.dataset.goto;\n            console.log('GotoPage', `${goToPage}`);\n            handler(goToPage);\n        });\n    }\n    // Método para generar el HTML de los botones de paginación\n    // Este método toma los datos de paginación y genera el HTML correspondiente\n    _generateMarkup() {\n        const curPage = this._data.page;\n        const numPages = Math.ceil(this._data.results.length / this._data.resultsPerPage);\n        //console.log('Total de paginas', `${numPages}`);\n        // Página 1, y hay más\n        if (curPage === 1 && numPages > 1) return `\n        <button data-goto=\"${curPage + 1}\" class=\"btn--inline pagination__btn--next\">\n          <span>Page ${curPage + 1}</span>\n          <svg class=\"search__icon\">\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports))}#icon-arrow-right\"></use>\n          </svg>\n        </button>\n      `;\n        // Última página\n        if (curPage === numPages && numPages > 1) return `\n        <button data-goto=\"${curPage - 1}\" class=\"btn--inline pagination__btn--prev\">\n          <svg class=\"search__icon\">\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports))}#icon-arrow-left\"></use>\n          </svg>\n          <span>Page ${curPage - 1}</span>\n        </button>\n      `;\n        // Página intermedia\n        if (curPage < numPages) return `\n        <button data-goto=\"${curPage - 1}\" class=\"btn--inline pagination__btn--prev\">\n          <svg class=\"search__icon\">\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports))}#icon-arrow-left\"></use>\n          </svg>\n          <span>Page ${curPage - 1}</span>\n        </button>\n        <button data-goto=\"${curPage + 1}\" class=\"btn--inline pagination__btn--next\">\n          <span>Page ${curPage + 1}</span>\n          <svg class=\"search__icon\">\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($1cd63cfe08530fad$exports))}#icon-arrow-right\"></use>\n          </svg>\n        </button>\n      `;\n        // Solo una página\n        return '';\n    }\n} // termina la clase PaginationView\nvar // Exportando una instancia de PaginationView para que pueda ser utilizada en otras partes de la aplicación\n// Esto permite que la vista de paginación sea reutilizable y se pueda acceder a sus métodos y\n// propiedades desde otras partes del código, como el controlador principal de la aplicación.\n$cfa940594ee109f7$export$2e2bcd8739ae039 = new $cfa940594ee109f7$var$PaginationView();\n\n\n// Seleccionando el elemento del DOM donde se renderizará la receta\nconst $f50bd1f2915ed0f2$var$recipeContainer = document.querySelector('.recipe');\n// Definiendo el controlador de recetas\n// Este controlador se encarga de manejar la lógica de las recetas, incluyendo la carga y renderizado de las mismas\n// Utiliza la función loadRecipe del modelo para obtener la receta y luego\n// renderiza la receta utilizando la vista recipeView\n// También maneja errores y muestra mensajes de error si ocurre algún problema al cargar la receta\n// La función controlRecipes es asíncrona para manejar operaciones que pueden tardar, como\n// la carga de datos desde una API o base de datos.\nconst $f50bd1f2915ed0f2$var$controlRecipes = async function() {\n    try {\n        // Obtener el ID de la receta desde el hash de la URL\n        const id = window.location.hash.slice(1);\n        // Si no hay ID, salir de la función\n        if (!id) return;\n        // Renderizar spinner mientras carga la receta\n        (0, $e95330fac959b1b1$export$2e2bcd8739ae039).renderSpinner();\n        // Cargar la receta utilizando el modelo\n        await $0f1d4402dffacf5b$export$b96725c7a035d60b(id);\n        // Renderizar la receta\n        (0, $e95330fac959b1b1$export$2e2bcd8739ae039).render($0f1d4402dffacf5b$export$ca000e230c0caa3e.recipe);\n        // Mensaje de éxito al cargar la receta\n        // recipeView.renderMessage('Receta cargada correctamente!'); \n        // temporal Mostrar los datos de la receta en la consola para depuración\n        console.log('Receta cargada:', $0f1d4402dffacf5b$export$ca000e230c0caa3e.recipe);\n    } catch (err) {\n        //Se lanza un error si ocurre un problema al cargar la receta\n        console.error(`Error al cargar la receta: ${err}`);\n        // Renderizar mensaje de error en la vista recipeView\n        // Esto permite mostrar un mensaje de error al usuario en la interfaz de usuario\n        // si ocurre un problema al cargar la receta, como un error de red o un ID\n        (0, $e95330fac959b1b1$export$2e2bcd8739ae039).renderError(err.message);\n        throw err; // Lanzar el error para que sea manejado por el controlador\n    }\n} // termina función controlRecipes\n;\n// Definiendo el controlador de búsqueda de resultados\n// Este controlador se encarga de manejar la lógica de búsqueda de recetas, incluyendo la carga y\n// renderizado de los resultados de búsqueda. Utiliza la función loadSearchResults del modelo\n// para obtener los resultados de búsqueda y luego renderiza los resultados utilizando la vista resultsView.\n// También maneja la paginación de los resultados y muestra mensajes de error si ocurre algún problema al cargar los resultados de búsqueda.\n// La función controlSearchResults es asíncrona para manejar operaciones que pueden tardar, como\n// la carga de datos desde una API o base de datos\n// y utiliza la vista searchView para obtener la consulta de búsqueda del usuario.\nconst $f50bd1f2915ed0f2$var$controlSearchResults = async function() {\n    try {\n        const query = (0, $813cf99795e9ec97$export$2e2bcd8739ae039).getQuery();\n        if (!query) return;\n        // Renderizar spinner\n        (0, $0e99300e7cdedd36$export$2e2bcd8739ae039).renderSpinner();\n        // Cargar los resultados de búsqueda utilizando el modelo\n        await $0f1d4402dffacf5b$export$202b8e5cb363a0c4(query);\n        // Renderizar los resultados de búsqueda\n        (0, $0e99300e7cdedd36$export$2e2bcd8739ae039).render((0, $0f1d4402dffacf5b$export$8d7f79465139ab72)());\n        // Renderizar la paginación de resultados\n        (0, $cfa940594ee109f7$export$2e2bcd8739ae039).render($0f1d4402dffacf5b$export$ca000e230c0caa3e.search);\n        console.log($0f1d4402dffacf5b$export$ca000e230c0caa3e.search.results); // Muestra los resultados en consola\n    } catch (err) {\n        console.error(\"\\u274C Error en controlSearchResults:\", err);\n    }\n}; // termina función controlSearchResults\n// Definiendo la funcion de controlador de paginación\n// Este controlador se encarga de manejar la lógica de paginación de los resultados de búsqueda\n// Utiliza la vista paginationView para renderizar los botones de paginación y\n// la función getSearchResultsPage del modelo para obtener los resultados de búsqueda de la página actual\n// La función controlPagination es asíncrona para manejar operaciones que pueden tardar, como\n// la carga de datos desde una API o base de datos.\n// También maneja la lógica de navegación entre páginas de resultados de búsqueda.\nconst $f50bd1f2915ed0f2$var$controlPagination = function(goToPage) {\n    (0, $0e99300e7cdedd36$export$2e2bcd8739ae039).render($0f1d4402dffacf5b$export$8d7f79465139ab72(goToPage));\n    (0, $cfa940594ee109f7$export$2e2bcd8739ae039).render($0f1d4402dffacf5b$export$ca000e230c0caa3e.search);\n};\n// Inicializando el controlador\n// Esta función se encarga de inicializar el controlador, añadiendo los manejadores de eventos necesarios\n// para renderizar la receta cuando se carga la página o se cambia el hash de la URL.\n// Utiliza la vista recipeView para añadir el manejador de eventos y renderizar la receta\n// También añade los manejadores de eventos para la búsqueda y paginación utilizando las vistas\n// searchView y paginationView respectivamente.\n// La función init se llama al final para iniciar el controlador. \nconst $f50bd1f2915ed0f2$var$init = function() {\n    (0, $e95330fac959b1b1$export$2e2bcd8739ae039).addHandlerRender($f50bd1f2915ed0f2$var$controlRecipes);\n    (0, $813cf99795e9ec97$export$2e2bcd8739ae039).addHandlerSearch($f50bd1f2915ed0f2$var$controlSearchResults);\n    (0, $cfa940594ee109f7$export$2e2bcd8739ae039).addHandlerClick($f50bd1f2915ed0f2$var$controlPagination);\n    console.log('Controlador inicializado');\n};\n$f50bd1f2915ed0f2$var$init(); // Llamada al controlador inicial para iniciar la aplicación\n\n\n//# sourceMappingURL=OK.ab5a7c15.js.map\n","\r\n// Importando las dependencias necesarias\r\n// Importando el modelo y las constantes de configuración\r\nimport * as model from './model.js';\r\nimport { API_URL, TIMEOUT_SEC } from './config.js'; // Importando las constantes  URL y timeout\r\nimport { Fraction_function } from './helpers.js'; // Importando la clase Fraction_function\r\nimport { loadSearchResults,getSearchResultsPage}  from './model.js';\r\nimport  icons  from 'url:../img/icons.svg'; // Importando los iconos SVG\r\n\r\n// Importando las vistas necesarias\r\nimport recipeView from './views/RecipeView.js';\r\nimport searchView from './views/searchView.js';\r\nimport resultsView from './views/resultView.js';\r\nimport paginationView from './views/paginationView.js'\r\n\r\n\r\n// Seleccionando el elemento del DOM donde se renderizará la receta\r\nconst recipeContainer = document.querySelector('.recipe');\r\n\r\n\r\n// Definiendo el controlador de recetas\r\n// Este controlador se encarga de manejar la lógica de las recetas, incluyendo la carga y renderizado de las mismas\r\n// Utiliza la función loadRecipe del modelo para obtener la receta y luego\r\n// renderiza la receta utilizando la vista recipeView\r\n// También maneja errores y muestra mensajes de error si ocurre algún problema al cargar la receta\r\n// La función controlRecipes es asíncrona para manejar operaciones que pueden tardar, como\r\n// la carga de datos desde una API o base de datos.\r\nconst controlRecipes = async function() {\r\n  try {\r\n    // Obtener el ID de la receta desde el hash de la URL\r\n    const id = window.location.hash.slice(1); \r\n    // Si no hay ID, salir de la función\r\n    if (!id) {return;} \r\n    // Renderizar spinner mientras carga la receta\r\n    recipeView.renderSpinner();\r\n    // Cargar la receta utilizando el modelo\r\n    await model.loadRecipe(id);\r\n    // Renderizar la receta\r\n    recipeView.render(model.state.recipe);\r\n    // Mensaje de éxito al cargar la receta\r\n   // recipeView.renderMessage('Receta cargada correctamente!'); \r\n    // temporal Mostrar los datos de la receta en la consola para depuración\r\n    console.log('Receta cargada:', model.state.recipe);\r\n  } catch (err) {\r\n    //Se lanza un error si ocurre un problema al cargar la receta\r\n    console.error(`Error al cargar la receta: ${err}`);\r\n    // Renderizar mensaje de error en la vista recipeView\r\n    // Esto permite mostrar un mensaje de error al usuario en la interfaz de usuario\r\n    // si ocurre un problema al cargar la receta, como un error de red o un ID\r\n    recipeView.renderError(err.message);\r\n    throw err; // Lanzar el error para que sea manejado por el controlador\r\n  }\r\n}// termina función controlRecipes\r\n\r\n\r\n// Definiendo el controlador de búsqueda de resultados\r\n// Este controlador se encarga de manejar la lógica de búsqueda de recetas, incluyendo la carga y\r\n// renderizado de los resultados de búsqueda. Utiliza la función loadSearchResults del modelo\r\n// para obtener los resultados de búsqueda y luego renderiza los resultados utilizando la vista resultsView.\r\n// También maneja la paginación de los resultados y muestra mensajes de error si ocurre algún problema al cargar los resultados de búsqueda.\r\n// La función controlSearchResults es asíncrona para manejar operaciones que pueden tardar, como\r\n// la carga de datos desde una API o base de datos\r\n// y utiliza la vista searchView para obtener la consulta de búsqueda del usuario.\r\nconst controlSearchResults = async function () {\r\n  try {\r\n    const query = searchView.getQuery();\r\n\r\n    if (!query) return;\r\n    // Renderizar spinner\r\n    resultsView.renderSpinner();\r\n    // Cargar los resultados de búsqueda utilizando el modelo\r\n    await model.loadSearchResults(query);\r\n    // Renderizar los resultados de búsqueda\r\n    resultsView.render(getSearchResultsPage());\r\n    // Renderizar la paginación de resultados\r\n    paginationView.render(model.state.search);\r\n\r\n    console.log(model.state.search.results); // Muestra los resultados en consola\r\n  } catch (err) {\r\n    console.error('❌ Error en controlSearchResults:', err);\r\n  }\r\n};// termina función controlSearchResults\r\n\r\n\r\n// Definiendo la funcion de controlador de paginación\r\n// Este controlador se encarga de manejar la lógica de paginación de los resultados de búsqueda\r\n// Utiliza la vista paginationView para renderizar los botones de paginación y\r\n// la función getSearchResultsPage del modelo para obtener los resultados de búsqueda de la página actual\r\n// La función controlPagination es asíncrona para manejar operaciones que pueden tardar, como\r\n// la carga de datos desde una API o base de datos.\r\n// También maneja la lógica de navegación entre páginas de resultados de búsqueda.\r\nconst controlPagination = function (goToPage) {\r\n  resultsView.render(model.getSearchResultsPage(goToPage));\r\n  paginationView.render(model.state.search);\r\n};\r\n\r\n\r\n// Inicializando el controlador\r\n// Esta función se encarga de inicializar el controlador, añadiendo los manejadores de eventos necesarios\r\n// para renderizar la receta cuando se carga la página o se cambia el hash de la URL.\r\n// Utiliza la vista recipeView para añadir el manejador de eventos y renderizar la receta\r\n// También añade los manejadores de eventos para la búsqueda y paginación utilizando las vistas\r\n// searchView y paginationView respectivamente.\r\n// La función init se llama al final para iniciar el controlador. \r\nconst init = function() {\r\n  recipeView.addHandlerRender(controlRecipes); \r\n  searchView.addHandlerSearch(controlSearchResults);\r\n  paginationView.addHandlerClick(controlPagination);\r\n  console.log('Controlador inicializado');\r\n\r\n}\r\ninit(); // Llamada al controlador inicial para iniciar la aplicación","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\r\n// Implementando el modelo MVC para la aplicación Forkify\r\n// Descripción: Este es el modelo de la aplicación Forkify, que se encarga de\r\n// manejar la lógica de negocio, incluyendo la obtención de recetas y su renderizado.\r\n// Repositorio: https://github.com/bmjimenez/proyectojs2\r\n// Fecha: 2025-07-16\r\n// Autor: Bernardo Moya Jimenez\r\n// email: bmjimenez@hotmail.com\r\n\r\n// Importando la URL de la API y la función getJSON para realizar peticiones HTTP\r\nimport { API_URL,RES_PER_PAGE } from './config.js'; // Importando la URL de la API   \r\nimport { getJSON } from './helpers.js';\r\n\r\n\r\n//Declaracion de objeto state con elementos inicializados\r\n// Este objeto state contiene la receta actual y los resultados de búsqueda.\r\n// Se utiliza para almacenar el estado de la aplicación y facilitar la gestión de datos.\r\n// La propiedad recipe almacena la receta actual, mientras que search contiene los resultados de búsqueda,\r\n// la consulta de búsqueda, la página actual y el número de resultados por página.\r\n// Este objeto se utiliza en el controlador para acceder a los datos de la aplicación y renderizar\r\n// las vistas correspondientes.\r\nexport const state = {\r\n    recipe: {},\r\n    search: {\r\n        query: '',\r\n        results: [],\r\n        page: 1,\r\n        resultsPerPage: RES_PER_PAGE,\r\n    },\r\n};\r\n\r\n//Función asíncrona loadRecipe que recibe id como parámetro\r\n// Esta función se encarga de cargar una receta específica desde la API\r\n// y actualizar el objeto state con los datos de la receta.\r\n// Si ocurre un error, se captura y se muestra en la consola.\r\nexport async function loadRecipe(id) {\r\n    try {\r\n        // Llamada a la función getJSON para obtener los datos de la receta\r\n        const data = await getJSON(`${API_URL}${id}`);\r\n        console.log('Datos de la receta:', data);\r\n        // Validar response structure recibida de la API\r\n        // Si la estructura de datos no es válida, se lanza un error\r\n        if (!data?.data?.recipe) {\r\n            throw new Error('Estructura de datos invalida');\r\n        }\r\n        // Desestructuración del objeto recipe y guardado en state\r\n        // Aquí se extraen los datos de la receta del objeto data y se crea un nuevo\r\n        // objeto recipe con las propiedades necesarias.\r\n        // Se asegura de que la propiedad ingredients sea un array, incluso si no hay ingredientes.\r\n        // Esto es importante para evitar errores al renderizar la receta en la vista.  \r\n        const { recipe } = data.data;\r\n        const recipeObj = {\r\n            id: recipe.id,\r\n            title: recipe.title,\r\n            publisher: recipe.publisher,\r\n            sourceUrl: recipe.source_url,\r\n            image: recipe.image_url,\r\n            servings: recipe.servings,\r\n            cookTime: recipe.cooking_time,\r\n            ingredients: Array.isArray(recipe.ingredients) ? recipe.ingredients : [],\r\n        };\r\n\r\n        //Guardar en en objeto state y mostrar en consola\r\n        // Aquí se actualiza el objeto state con la receta cargada,\r\n        // lo que permite que otras partes de la aplicación accedan a los datos de la receta\r\n        state.recipe = recipeObj;\r\n        console.log('Objeto Recipe cargado:', state.recipe);\r\n\r\n    } catch (err) {\r\n        // Lanzar el error para que sea manejado por el controlador\r\n        throw err;\r\n        // Aquí se captura cualquier error que ocurra durante la carga de la receta\r\n        // y se lanza para que pueda ser manejado por el controlador.\r\n        // Esto es útil para manejar errores de red, errores de la API o errores de validación de datos.\r\n        // También se puede mostrar un mensaje de error al usuario en la vista.\r\n        // En este caso, se lanza el error para que sea manejado por el controlador\r\n        // y se pueda mostrar un mensaje de error adecuado en la interfaz de usuario.\r\n        // Se puede utilizar console.log para mostrar el error en la consola durante el desarrollo.\r\n        console.log(`Error al cargar receta: ${err}`);\r\n    }\r\n}// termina la función loadRecipe\r\n\r\n// Función asíncrona loadSearchResults que recibe query como parámetro\r\n// Esta función se encarga de cargar los resultados de búsqueda desde la API\r\n// y actualizar el objeto state con los resultados de búsqueda.\r\n// Si ocurre un error, se captura y se muestra en la consola.\r\nexport async function loadSearchResults(query) {\r\n    try {\r\n        const data = await getJSON(`${API_URL}?search=${query}`);\r\n        console.log('Resultados de la búsqueda:', data);\r\n\r\n        // Validar estructura de datos recibida de la API\r\n        // Si la estructura de datos no es válida, se lanza un error\r\n        // Aquí se verifica que la propiedad recipes exista en el objeto data.data\r\n        // y que sea un array. Si no es así, se lanza un error.\r\n        // Esto es importante para asegurarse de que los datos recibidos sean válidos\r\n        // y se puedan procesar correctamente en la aplicación.\r\n        if (!data?.data?.recipes || !Array.isArray(data.data.recipes)) {\r\n            throw new Error('Estructura de datos inválida');\r\n        }\r\n        // Guardar query en el estado\r\n        state.search.query = query;\r\n        // Transformar los resultados y guardarlos en el objeto state\r\n        // Aquí se mapea el array de recetas recibido de la API y se crea un nuevo\r\n        // array de objetos con las propiedades necesarias para mostrar en la vista.\r\n        // Se asegura de que cada objeto tenga las propiedades id, title, publisher e image.\r\n        // Esto es importante para que la vista pueda renderizar correctamente los resultados de búsqueda.\r\n        // Se utiliza el método map para transformar los datos y crear un nuevo array de objetos.\r\n        // Luego, se guarda este array en la propiedad results del objeto state.search.\r\n        // Esto permite que otras partes de la aplicación accedan a los resultados de búsqueda\r\n        state.search.results = data.data.recipes.map(rec => {\r\n            return {\r\n                id: rec.id,\r\n                title: rec.title,\r\n                publisher: rec.publisher,\r\n                image: rec.image_url,\r\n            };\r\n        });\r\n\r\n        console.log('Resultados de busqueda guardados:', `${state.search.results}`);\r\n    } catch (err) {\r\n        console.log(`${err} 💥💥💥💥`);\r\n        throw err; // Lanzar el error para que sea manejado por el controlador  \r\n    }\r\n}// termina la función loadSearchResults\r\n\r\n// Función para obtener una página de resultados de búsqueda\r\n// Esta función toma un número de página como argumento y devuelve los resultados de búsqueda\r\n// correspondientes a esa página. Si no se proporciona un número de página, se utiliza el valor\r\n// actual de la página en el objeto state.search.page.\r\n// Se calcula el índice de inicio y fin de los resultados para esa página y se devuelve un\r\n// array con los resultados correspondientes.\r\n// Esta función es útil para implementar la paginación de resultados de búsqueda en la aplicación.\r\n// Permite obtener los resultados de búsqueda de una página específica y facilita la navegación\r\n// entre páginas de resultados.\r\nexport const getSearchResultsPage = function (page = state.search.page) {\r\n    state.search.page = page;\r\n\r\n    const start = (page - 1) * state.search.resultsPerPage;\r\n    const end = page * state.search.resultsPerPage;\r\n\r\n    return state.search.results.slice(start, end);\r\n};","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\r\n// Archivo de configuración para la aplicación Forkify\r\n// Contiene constantes y configuraciones globales\r\n// Repositorio:https://github.com/bmjimenez/proyectojs2\r\n// Fecha: 2025-07-16\r\n// Autor: Bernardo Moya Jimenez\r\n// email: bmjimenez@hotmail.com\r\n\r\n// Este archivo contiene la URL de la API y el tiempo de espera para las peticiones HTTP\r\n// Se utiliza para configurar la conexión a la API y manejar errores de tiempo de espera.\r\n// Estas constantes son importadas en otros módulos para realizar peticiones a la API y manejar la lógica de la aplicación.\r\n// Se recomienda mantener estas constantes en un archivo separado para facilitar su mantenimiento y reutilización en toda la aplicación.\r\n// Además, se pueden agregar más configuraciones globales en este archivo según sea necesario en el futuro.\r\nexport const API_URL = 'https://forkify-api.herokuapp.com/api/v2/recipes/';\r\nexport const TIMEOUT_SEC = 5; // Timeout para las peticiones\r\nexport const RES_PER_PAGE = 10; // paginas de hasta 10 resultados ","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\r\n// Archivo helpers.js con funciones auxiliares para la aplicación Forkify\r\n// Contiene funciones para manejar peticiones a la API y otras utilidades\r\n// Repositorio: https://github.com/bmjimenez/proyectojs2\r\n// Fecha: 2025-07-16\r\n// Autor: Bernardo Moya Jimenez\r\n// email: bmjimenez@hotmail.com\r\n\r\nimport { API_URL, TIMEOUT_SEC } from './config.js'; // Importando la URL de la API desde config.js\r\n\r\n\r\n// Funcion para obtener los datos de una receta y hacer una petición a la API\r\n// Esta función realiza una petición a la API y devuelve los datos de la receta\r\n\r\nexport async function getJSON(id) {\r\n    try {\r\n\r\n        const fetchPro = fetch(id);\r\n        //console.log('Petición a la API:', `${API_URL}${id}`);\r\n        const res = await Promise.race([fetchPro, timeout(TIMEOUT_SEC)]);\r\n\r\n        const data = await res.json();\r\n        // Validación del estado de res\r\n        if (!res.ok) throw new Error(`${data.message} (${res.status})`);\r\n        return data\r\n\r\n    } catch (err) {\r\n        // Lanzar el error para que sea manejado por el controlador;\r\n        throw err;\r\n    }\r\n}// termina la función getJSON\r\n\r\n\r\n\r\n// Funcion para manejar el timeout de las peticiones\r\n// Esta función devuelve una promesa que se rechaza después de un tiempo específico\r\n// Sirve para manejar casos en los que una petición tarda demasiado tiempo en completarse.\r\nconst timeout = function (s) {\r\n    return new Promise(function (_, reject) {\r\n        setTimeout(function () {\r\n            reject(new Error(`Request took too long! Timeout after ${s} second`));\r\n        }, s * 1000);\r\n    });\r\n};\r\n\r\n\r\n// Debido a problemas con Fractional, tuve que implementar una clase para manejar fracciones\r\n// Clase Fraction_function para manejar fracciones\r\n// Esta clase permite crear fracciones a partir de números o cadenas de texto\r\n// Si se proporciona un denominador, se crea una fracción con el numerador y denominador especificados\r\n// Si no se proporciona un denominador, se calcula la fracción a partir of un número o cadena de texto\r\n// La clase incluye métodos para convertir la fracción a una cadena de texto y para obtener su valor numérico\r\nexport class Fraction_function {\r\n    constructor(numerator, denominator) {\r\n        if (denominator) {\r\n            this.numerator = numerator;\r\n            this.denominator = denominator;\r\n        } else {\r\n            const value = typeof numerator === 'number' ? numerator : parseFloat(numerator);\r\n            const tolerance = 1.0E-6;\r\n            let h1 = 1,\r\n                h2 = 0,\r\n                k1 = 0,\r\n                k2 = 1,\r\n                b = value;\r\n            do {\r\n                const a = Math.floor(b);\r\n                let aux = h1;\r\n                h1 = a * h1 + h2;\r\n                h2 = aux;\r\n                aux = k1;\r\n                k1 = a * k1 + k2;\r\n                k2 = aux;\r\n                b = 1 / (b - a);\r\n            } while (Math.abs(value - h1 / k1) > value * tolerance);\r\n\r\n            this.numerator = h1;\r\n            this.denominator = k1;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        return this.denominator === 1\r\n            ? `${this.numerator}`\r\n            : `${this.numerator}/${this.denominator}`;\r\n    }\r\n\r\n    valueOf() {\r\n        return this.numerator / this.denominator;\r\n    }\r\n} // termina la clase Fraction_function","module.exports = __parcel__import__.meta.resolve(\"eyyUD\");","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\r\n//Autor: Jose Bernardo Moya Jimenez\r\n//email: bmjimenez@hotmail.com\r\n//Descripción: Este es el modelo de la aplicación Forkify, que se encarga de manejar la lógica de negocio, incluyendo la obtención de recetas y su renderizado.\r\n//Repositorio:https://github.com/bmjimenez/proyectojs2\r\n//Fecha: 2025-07-16\r\n\r\n// Importando iconos SVG y la clase Fraction_function\r\nimport icons from 'url:../../img/icons.svg'; // Usar parcel u otra herramienta para íconos SVG\r\nimport {Fraction_function}  from '..//helpers.js'; // requiere: npm install fracty\r\nimport View from './view.js'\r\n\r\n// Clase RecipeView se encarga de renderizar la receta en el DOM, mostrar errores y spinner\r\n// y manejar eventos relacionados con la receta.\r\n// RecipeView hereda de la clase View para reutilizar métodos comunes de renderización\r\n// y manejo de errores.\r\nclass RecipeView extends View {\r\n  // Seleccionando el elemento del DOM donde se renderizará la receta\r\n  _parentElement = document.querySelector('.recipe');\r\n  _data;\r\n  _errorMessage = 'We could not find that recipe. Please try another one!';\r\n  _message = 'Recipe loaded successfully!';\r\n\r\n  // Método para renderizar la receta en el DOM\r\n  // Este método genera el HTML necesario para mostrar la receta\r\n  // y lo inserta en el contenedor de recetas.\r\n  // Utiliza la función _generateMarkup para crear el HTML de la receta.\r\n  render(data) {\r\n    if (!data || typeof data !== 'object') return this.renderError();\r\n    this._data = data;\r\n    const markup = this._generateMarkup();\r\n    this._clear();\r\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n  }\r\n\r\n  // Método para renderizar un spinner mientras se cargan los datos\r\n  renderSpinner() {\r\n    const markup = `\r\n      <div class=\"spinner\">\r\n        <svg>\r\n          <use href=\"${icons}#icon-loader\"></use>\r\n        </svg>\r\n      </div>\r\n    `;\r\n    this._clear();\r\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n  }\r\n\r\n  // Este método renderiza un mensaje de error en el DOM\r\n  // Se utiliza un template literal para crear el HTML del mensaje de error.\r\n  // El método _clear se utiliza para eliminar el contenido previo antes de renderizar el error\r\n  // y se inserta el nuevo contenido al principio del contenedor de recetas.\r\n  renderError(message = this._errorMessage) {\r\n    if (!message) message = this._errorMessage;\r\n    const markup = `\r\n      <div class=\"error\">\r\n        <div>\r\n          <svg>\r\n            <use href=\"${icons}#icon-alert-triangle\"></use>\r\n          </svg>\r\n        </div>\r\n        <p>${message}</p>\r\n      </div>\r\n    `;\r\n    this._clear();\r\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n  }\r\n\r\n  // Este método renderiza un mensaje de exito en el DOM\r\n  // Se utiliza un template literal para crear el HTML del mensaje de éxito.\r\n  // El método _clear se utiliza para eliminar el contenido previo antes de renderizar el error\r\n  // y se inserta el nuevo contenido al principio del contenedor de recetas.\r\n  renderMessage(message = this._message) {\r\n    if (!message) message = this._message;\r\n    const markup = `\r\n      <div class=\"error\">\r\n        <div>\r\n          <svg>\r\n            <use href=\"${icons}#icon-smile\"></use>\r\n          </svg>\r\n        </div>\r\n        <p>${message}</p>\r\n      </div>\r\n    `;\r\n    this._clear();\r\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n  }// termina el método renderMessage\r\n\r\n\r\n  // Método para añadir un manejador de eventos para renderizar la receta\r\n  // Este método se utiliza para escuchar eventos de cambio en el hash de la URL\r\n  // y cargar la receta correspondiente cuando el hash cambia.\r\n  // Se utiliza para actualizar la vista de la receta cuando el usuario navega a una receta\r\n  // específica a través de la URL.\r\n  // Se utiliza un bucle forEach para añadir el manejador de eventos a los eventos\r\n  // 'hashchange' y 'load', lo que permite que la receta se cargue\r\n  // tanto al cambiar el hash de la URL como al cargar la página por primera vez.\r\n  // Esto asegura que la receta se renderice correctamente en ambos casos.\r\n  // Se utiliza el método addEventListener para añadir el manejador de eventos.\r\n  // El manejador de eventos se pasa como argumento a este método.\r\n  // Esto permite que el controlador pueda definir la lógica de renderizado de la receta.\r\n  // El manejador de eventos se ejecutará cada vez que ocurra uno de los eventos\r\n  // especificados, lo que permite que la receta se renderice automáticamente\r\n  // cuando el usuario navega a una receta específica.\r\n  addHandlerRender(handler) {\r\n    ['hashchange', 'load'].forEach(ev =>\r\n      window.addEventListener(ev, handler)\r\n    );\r\n  }\r\n\r\n  // Método para limpiar el contenido del contenedor de recetas\r\n  // Este método se utiliza para eliminar el contenido previo antes de renderizar una nueva receta.\r\n  _clear() {\r\n    this._parentElement.innerHTML = '';\r\n  }\r\n\r\n  // Método para renderizar la receta en el DOM\r\n  // Este método genera el HTML necesario para mostrar la receta\r\n  // y lo inserta en el contenedor de recetas.\r\n  // Utiliza la función _generateMarkup para crear el HTML de la receta.\r\n  _generateMarkup() {\r\n    if (!this._data.ingredients || !Array.isArray(this._data.ingredients)) {\r\n      return this.renderError('Ingredientes no disponibles');\r\n    }\r\n\r\n    return `\r\n    <figure class=\"recipe__fig\">\r\n        <img src=\"${this._data.image}\" alt=\"${this._data.title}\" class=\"recipe__img\" />\r\n        <h1 class=\"recipe__title\"><span>${this._data.title}</span></h1>\r\n    </figure>\r\n\r\n    <div class=\"recipe__details\">\r\n        <div class=\"recipe__info\">\r\n        <svg class=\"recipe__info-icon\">\r\n            <use href=\"${icons}#icon-clock\"></use>\r\n        </svg>\r\n        <span class=\"recipe__info-data recipe__info-data--minutes\">${this._data.cookTime}</span>\r\n        <span class=\"recipe__info-text\">minutes</span>\r\n        </div>\r\n        <div class=\"recipe__info\">\r\n        <svg class=\"recipe__info-icon\">\r\n            <use href=\"${icons}#icon-users\"></use>\r\n        </svg>\r\n        <span class=\"recipe__info-data recipe__info-data--people\">${this._data.servings}</span>\r\n        <span class=\"recipe__info-text\">servings</span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"recipe__ingredients\">\r\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\r\n        <ul class=\"recipe__ingredient-list\">\r\n        ${this._data.ingredients.map(this._generateIngredientMarkup).join('')}\r\n        </ul>\r\n    </div>\r\n\r\n    <div class=\"recipe__directions\">\r\n        <h2 class=\"heading--2\">How to cook it</h2>\r\n        <p class=\"recipe__directions-text\">\r\n        This recipe was designed by\r\n        <span class=\"recipe__publisher\">${this._data.publisher}</span>. Check it out!\r\n        </p>\r\n        <a class=\"btn--small recipe__btn\" href=\"${this._data.sourceUrl}\" target=\"_blank\">\r\n        <span>Directions</span>\r\n        <svg class=\"search__icon\">\r\n            <use href=\"${icons}#icon-arrow-right\"></use>   \r\n        </svg>\r\n        </a>    \r\n    </div>\r\n  `;\r\n  }// termina el método _generateMarkup\r\n\r\n  // Método privado para generar el HTML de un ingrediente\r\n  // Este método se utiliza para crear el HTML de cada ingrediente de la receta.\r\n  // Utiliza la función _formatQuantity para formatear la cantidad del ingrediente.\r\n  // Este método es llamado dentro de _generateMarkup para generar la lista de ingredientes.\r\n  // Se utiliza un template literal para crear el HTML de cada ingrediente.\r\n  // Cada ingrediente se muestra con su cantidad, unidad y descripción.\r\n  _generateIngredientMarkup(ing) {\r\n    return `\r\n      <li class=\"recipe__ingredient\">\r\n        <svg class=\"recipe__icon\">\r\n          <use href=\"${icons}#icon-check\"></use>\r\n        </svg>\r\n        <div class=\"recipe__quantity\">\r\n          ${ing.quantity ? new Fraction_function(ing.quantity).toString() : ''}\r\n        </div>\r\n        <div class=\"recipe__description\">\r\n          <span class=\"recipe__unit\">${ing.unit || ''}</span>\r\n          ${ing.description}\r\n        </div>\r\n      </li>\r\n    `;\r\n  }\r\n\r\n  // Método privado para formatear la cantidad de un ingrediente\r\n  // Este método utiliza la clase Fraction_function para convertir la cantidad a una fracción\r\n  // Si la cantidad no es un número válido, se devuelve la cantidad original.\r\n  _formatQuantity(qty) {\r\n    try {\r\n      return new Fraction_function(qty).toString();\r\n    } catch (e) {\r\n      return qty;\r\n    }\r\n  }\r\n}// termina la clase RecipeView\r\n\r\n// Exportar una instancia de RecipeView para ser utilizada en el controlador\r\n// Esto permite que el controlador pueda acceder a los métodos de la clase RecipeView\r\n// y renderizar recetas, spinner y errores en el DOM.\r\n// Se utiliza el patrón Singleton para asegurar que solo haya una instancia de RecipeView.\r\n// Esto es útil para mantener un único punto de acceso a la vista de recetas en toda la aplicación.\r\n// Esto evita la creación de múltiples instancias y asegura que los cambios en la vista se reflecten en un solo lugar.\r\n// Se puede importar esta instancia en el controlador y utilizar sus métodos directamente.\r\nexport default new RecipeView();","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\r\n//Autor: Jose Bernardo Moya Jimenez\r\n//email: bmjimenez@hotmail.com\r\n//Descripción: Este es el modelo de la aplicación Forkify, que se encarga de manejar\r\n// las vistas de la aplicación, incluyendo la búsqueda de recetas, la paginación\r\n// y la visualización de recetas.\r\n//Repositorio:https://github.com/bmjimenez/proyectojs2\r\n//Fecha: 2025-07-18\r\n\r\n\r\n//Importa iconos\r\nimport icons from 'url:../../img/icons.svg'; \r\n//import View from './view.js';\r\n\r\n// Clase View que maneja la renderización de datos en el DOM\r\n// Esta clase se encarga de renderizar los datos en el DOM, mostrar errores y spinner\r\n// y manejar eventos relacionados con la vista.\r\n// La clase View es una clase base (padre) que puede ser extendida por otras vistas específicas,\r\n// como RecipeView o SearchView, para reutilizar métodos comunes de renderización y manejo de errores.\r\n// Esta clase proporciona métodos para renderizar datos, mostrar errores y mensajes,\r\n// y renderizar un spinner mientras se cargan los datos.\r\n// También proporciona un método para limpiar el contenido previo antes de renderizar nuevos datos.\r\n// La clase View es una parte fundamental de la arquitectura de la aplicación, ya que\r\n// permite separar la lógica de negocio de la lógica de presentación, facilitando el mantenimiento\r\n// y la escalabilidad de la aplicación.\r\n// Esta clase es utilizada por otras vistas para renderizar datos en el DOM y manejar eventos relacionados\r\n// con la vista, como la búsqueda de recetas o la visualización de recetas específicas.\r\nexport default class View {\r\n  _data;\r\n\r\n  // Método para renderizar los datos en el DOM\r\n  // Este método toma los datos y genera el HTML correspondiente utilizando el método _generateMarkup.\r\n  // Luego, limpia el contenido previo del elemento padre y agrega el nuevo HTML al principio.\r\n  // Si los datos son inválidos o no existen, se renderiza un mensaje de error\r\n  // utilizando el método renderError.\r\n  // Si los datos son válidos, se renderiza el HTML generado por _generateMarkup\r\n  // y se limpia el contenido previo del elemento padre antes de agregar el nuevo HTML.\r\n  // Este método es utilizado por las vistas para renderizar datos en el DOM y actualizar la\r\n  // interfaz de usuario con la información más reciente.\r\n  render(data) {\r\n    if (!data || (Array.isArray(data) && data.length === 0)) return this.renderError();\r\n\r\n    this._data = data;\r\n    const markup = this._generateMarkup();\r\n    this._clear();\r\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n  }\r\n\r\n  // Método para limpiar el contenido previo del elemento padre\r\n  _clear() {\r\n    this._parentElement.innerHTML = '';\r\n  }\r\n\r\n  // Método para renderizar un spinner mientras se cargan los datos\r\n  // Este método genera un HTML para un spinner de carga y lo inserta en el elemento\r\n  // padre antes de renderizar los datos. Se utiliza para indicar al usuario que los datos\r\n  // están siendo cargados y que debe esperar.\r\n  // El spinner se muestra mientras se realizan operaciones asíncronas, como la carga de\r\n  // datos desde una API o base de datos.\r\n  renderSpinner() {\r\n    const markup = `\r\n      <div class=\"spinner\">\r\n        <svg>\r\n          <use href=\"${icons}#icon-loader\"></use>\r\n        </svg>\r\n      </div>`;\r\n    this._clear();\r\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n  }\r\n\r\n  // Método para renderizar un mensaje de error\r\n  // Este método genera un HTML para un mensaje de error y lo inserta en el elemento\r\n  // padre. \r\n  renderError(message = this._errorMessage) {\r\n    const markup = `\r\n      <div class=\"error\">\r\n        <div>\r\n          <svg>\r\n            <use href=\"${icons}#icon-alert-triangle\"></use>\r\n          </svg>\r\n        </div>\r\n        <p>${message}</p>\r\n      </div>`;\r\n    this._clear();\r\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n  }\r\n\r\n  // Método para renderizar un mensaje de éxito\r\n  // Este método genera un HTML para un mensaje de éxito y lo inserta en el elemento\r\n  // padre. \r\n  renderMessage(message = this._message) {\r\n    const markup = `\r\n      <div class=\"message\">\r\n        <div>\r\n          <svg>\r\n            <use href=\"${icons}#icon-smile\"></use>\r\n          </svg>\r\n        </div>\r\n        <p>${message}</p>\r\n      </div>`;\r\n    this._clear();\r\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n  }\r\n}// termina la clase View","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\r\n//Autor: Jose Bernardo Moya Jimenez \r\n//email: bmjimenez@hotmail.com\r\n//Descripción: Esta clase genera la Vista de los resultados de busqueda \r\n//Repositorio:https://github.com/bmjimenez/proyectojs2\r\n//Fecha: 2025-07-17\r\n\r\n// Esta clase SearchView se encarga de manejar la vista de búsqueda en la aplicación Forkify.\r\n// Permite obtener la consulta de búsqueda del usuario y manejar el evento de búsqueda.\r\n// Utiliza el patrón de diseño de vista para separar la lógica de la interfaz de usuario de\r\n// la lógica de negocio, facilitando el mantenimiento y la escalabilidad de la aplicación.\r\nclass SearchView {\r\n  _parentEl = document.querySelector('.search');\r\n\r\n  // Método para obtener la consulta de búsqueda del usuario\r\n  // Este método busca el valor del campo de entrada de búsqueda y lo devuelve.\r\n  getQuery() {\r\n    const query = this._parentEl.querySelector('.search__field').value;\r\n    this._clearInput();\r\n    return query;\r\n  }\r\n\r\n  // Método para limpiar el campo de entrada de búsqueda\r\n  _clearInput() {\r\n    this._parentEl.querySelector('.search__field').value = '';\r\n  }\r\n\r\n  // Método para renderizar un mensaje de error en la vista de búsqueda\r\n  addHandlerSearch(handler) {\r\n    this._parentEl.addEventListener('submit', function (e) {\r\n      e.preventDefault();\r\n      handler();\r\n    });\r\n  }\r\n}// termina la clase searchView\r\n\r\n// Exportando una instancia de SearchView para que pueda ser utilizada en otras partes de la aplicación\r\nexport default new SearchView();","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\r\n//Autor: Jose Bernardo Moya Jimenez\r\n//email: bmjimenez@hotmail.com\r\n//Descripción: Esta es la vista de resultados de búsqueda de recetas en la aplicación Forkify.\r\n// Esta vista se encarga de renderizar los resultados de búsqueda obtenidos del modelo,\r\n// mostrando una lista de recetas que coinciden con la consulta del usuario.\r\n// Utiliza la clase View para manejar la renderización de los resultados y la clase icons\r\n// para mostrar iconos SVG en la interfaz de usuario.\r\n//Repositorio:https://github.com/bmjimenez/proyectojs2\r\n//Fecha: 2025-07-19\r\n\r\n// Importando la clase View \r\nimport View from './view.js';\r\n//import icons from 'url:../../img/icons.svg';\r\n\r\n// ResultsView hereda de la clase View para reutilizar métodos comunes de renderización\r\nclass ResultsView extends View {\r\n  _parentElement = document.querySelector('.results');\r\n  _errorMessage = 'No recipes found for your query. Please try again!';\r\n  _message = '';\r\n\r\n  // Método para renderizar los resultados de búsqueda\r\n  // Este método toma los datos de resultados de búsqueda y genera el HTML correspondiente\r\n  // utilizando el método _generateMarkupPreview. Luego, limpia el contenido previo del elemento\r\n  // padre y agrega el nuevo HTML al principio.\r\n\r\n  _generateMarkup() {\r\n    if (!this._data || this._data.length === 0) {\r\n      return this.renderError(this._errorMessage)};\r\n    return this._data.map(this._generateMarkupPreview).join('');\r\n  }\r\n\r\n  _generateMarkupPreview(result) {\r\n    return `\r\n      <li class=\"preview\">\r\n        <a class=\"preview__link\" href=\"#${result.id}\">\r\n          <figure class=\"preview__fig\">\r\n            <img src=\"${result.image}\" alt=\"${result.title}\" />\r\n          </figure>\r\n          <div class=\"preview__data\">\r\n            <h4 class=\"preview__title\">${result.title}</h4>\r\n            <p class=\"preview__publisher\">${result.publisher}</p>\r\n            <div class=\"preview__user-generated\"></div>\r\n          </div>\r\n        </a>\r\n      </li>`;\r\n  }\r\n}// termina la clase ResultsView\r\n\r\n// Exportando una instancia de ResultsView para que pueda ser utilizada en otras partes de la aplicación\r\n// Esto permite que la vista de resultados sea reutilizable y se pueda acceder a sus métodos y\r\n// propiedades desde otras partes del código, como el controlador principal de la aplicación.\r\n// Al exportar una instancia, se asegura que siempre se utilice la misma instancia de ResultsView\r\n// en toda la aplicación, lo que facilita el manejo del estado y la renderización de resultados.\r\n// Esto es útil para mantener la consistencia en la interfaz de usuario y evitar problemas de\r\n// duplicación de vistas o resultados.\r\n// Además, al exportar una instancia, se puede acceder a los métodos de la clase ResultsView\r\n// directamente desde el controlador, lo que simplifica la lógica de renderización de resultados\r\n// y mejora la legibilidad del código.\r\nexport default new ResultsView();","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\r\n// Implementando el modelo MVC para la aplicación Forkify\r\n// Descripción: Este es el modulo de la aplicación Forkify, que se encarga de hacer la paginación de los resultados de búsqueda\r\n// Repositorio: https://github.com/bmjimenez/proyectojs2\r\n// Fecha: 2025-07-16\r\n// Autor: Bernardo Moya Jimenez\r\n// email: bmjimenez@hotmail.com\r\n\r\nimport View from './view.js';\r\nimport icons from 'url:../../img/icons.svg';\r\n\r\n// Clase PaginationView que maneja la paginación de los resultados de búsqueda\r\n// Esta clase hereda de la clase View para reutilizar métodos comunes de renderización\r\n// y manejo de errores. Se encarga de renderizar los botones de paginación\r\n// y manejar los eventos de clic en los botones de paginación.\r\nclass PaginationView extends View {\r\n  _parentElement = document.querySelector('.pagination');\r\n\r\n  // Método para renderizar los botones de paginación\r\n  // Este método genera el HTML necesario para los botones de paginación\r\n  // y lo inserta en el contenedor de paginación.\r\n  addHandlerClick(handler) {\r\n    this._parentElement.addEventListener('click', function (e) {\r\n      const btn = e.target.closest('.btn--inline');\r\n      if (!btn) return;\r\n\r\n      const goToPage = +btn.dataset.goto;\r\n      console.log('GotoPage', `${goToPage}`);\r\n      handler(goToPage);\r\n    });\r\n  }\r\n  // Método para generar el HTML de los botones de paginación\r\n  // Este método toma los datos de paginación y genera el HTML correspondiente\r\n  _generateMarkup() {\r\n    const curPage = this._data.page;\r\n    const numPages = Math.ceil(this._data.results.length / this._data.resultsPerPage);\r\n    //console.log('Total de paginas', `${numPages}`);\r\n\r\n\r\n    // Página 1, y hay más\r\n    if (curPage === 1 && numPages > 1) {\r\n      return `\r\n        <button data-goto=\"${curPage + 1}\" class=\"btn--inline pagination__btn--next\">\r\n          <span>Page ${curPage + 1}</span>\r\n          <svg class=\"search__icon\">\r\n            <use href=\"${icons}#icon-arrow-right\"></use>\r\n          </svg>\r\n        </button>\r\n      `;\r\n    }\r\n\r\n    // Última página\r\n    if (curPage === numPages && numPages > 1) {\r\n      return `\r\n        <button data-goto=\"${curPage - 1}\" class=\"btn--inline pagination__btn--prev\">\r\n          <svg class=\"search__icon\">\r\n            <use href=\"${icons}#icon-arrow-left\"></use>\r\n          </svg>\r\n          <span>Page ${curPage - 1}</span>\r\n        </button>\r\n      `;\r\n    }\r\n\r\n    // Página intermedia\r\n    if (curPage < numPages) {\r\n      return `\r\n        <button data-goto=\"${curPage - 1}\" class=\"btn--inline pagination__btn--prev\">\r\n          <svg class=\"search__icon\">\r\n            <use href=\"${icons}#icon-arrow-left\"></use>\r\n          </svg>\r\n          <span>Page ${curPage - 1}</span>\r\n        </button>\r\n        <button data-goto=\"${curPage + 1}\" class=\"btn--inline pagination__btn--next\">\r\n          <span>Page ${curPage + 1}</span>\r\n          <svg class=\"search__icon\">\r\n            <use href=\"${icons}#icon-arrow-right\"></use>\r\n          </svg>\r\n        </button>\r\n      `;\r\n    }\r\n\r\n    // Solo una página\r\n    return '';\r\n  }\r\n}// termina la clase PaginationView\r\n\r\n// Exportando una instancia de PaginationView para que pueda ser utilizada en otras partes de la aplicación\r\n// Esto permite que la vista de paginación sea reutilizable y se pueda acceder a sus métodos y\r\n// propiedades desde otras partes del código, como el controlador principal de la aplicación.\r\nexport default new PaginationView();"],"names":["$parcel$interopDefault","a","__esModule","default","$ba30e20475feac5a$export$923ea8233b386e99","$bd02c871d9c5ba8e$export$d047a7c56db64af4","id","fetchPro","fetch","res","Promise","race","$bd02c871d9c5ba8e$var$timeout","data","json","ok","Error","message","status","err","s","_","reject","setTimeout","$bd02c871d9c5ba8e$export$30ce4bf7c3d733c3","numerator","denominator","value","parseFloat","h1","h2","k1","k2","b","Math","floor","aux","abs","toString","valueOf","$0f1d4402dffacf5b$export$ca000e230c0caa3e","recipe","search","query","results","page","resultsPerPage","$0f1d4402dffacf5b$export$b96725c7a035d60b","console","log","title","publisher","sourceUrl","source_url","image","image_url","servings","cookTime","cooking_time","ingredients","Array","isArray","$0f1d4402dffacf5b$export$202b8e5cb363a0c4","recipes","map","rec","$0f1d4402dffacf5b$export$8d7f79465139ab72","start","end","slice","$1cd63cfe08530fad$exports","resolve","$b2d7157267813d3a$export$2e2bcd8739ae039","_data","render","length","renderError","markup","_generateMarkup","_clear","_parentElement","insertAdjacentHTML","innerHTML","renderSpinner","_errorMessage","renderMessage","_message","$e95330fac959b1b1$var$RecipeView","document","querySelector","addHandlerRender","handler","forEach","ev","window","addEventListener","_generateIngredientMarkup","join","ing","quantity","unit","description","_formatQuantity","qty","e","$e95330fac959b1b1$export$2e2bcd8739ae039","$813cf99795e9ec97$var$SearchView","_parentEl","getQuery","_clearInput","addHandlerSearch","preventDefault","$813cf99795e9ec97$export$2e2bcd8739ae039","$0e99300e7cdedd36$var$ResultsView","_generateMarkupPreview","result","$0e99300e7cdedd36$export$2e2bcd8739ae039","$cfa940594ee109f7$var$PaginationView","addHandlerClick","btn","target","closest","goToPage","dataset","goto","curPage","numPages","ceil","$cfa940594ee109f7$export$2e2bcd8739ae039","$f50bd1f2915ed0f2$var$controlRecipes","location","hash","error","$f50bd1f2915ed0f2$var$controlSearchResults"],"version":3,"file":"OK.ab5a7c15.js.map"}